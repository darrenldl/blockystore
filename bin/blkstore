#!/usr/bin/env python3
import argparse
import shutil
import ipaddress
from packaging import version
import re
import subprocess
from subprocess import Popen, PIPE
import socket
import threading
import json
from datetime import datetime
from pathlib import Path
import os
import random
import string

blkar_name="blkar"
blkar_min_ver=version.parse("7.0.0")
blkar_max_ver_exc=version.parse("8.0.0")

default_port=20000

rs_data = 10
rs_parity = 2
burst = 10

data_chunk = 4096 - 16

def get_time_str():
    return datetime.today().strftime("%Y-%m-%d_%H%M")

def gen_random_str(len):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=len))

def check_for_blkar_installation():
    if shutil.which(blkar_name) == None:
        print(blkar_name + " not detected, please make sure you have installed blkar correctly")
        exit(1)

    ver_str = re.match("blkar (.*)\n", subprocess.check_output(["blkar", "--version"]).decode("utf-8")).group(1)
    ver = version.parse(ver_str)
    if ver < blkar_min_ver or ver >= blkar_max_ver_exc:
        print("Version " + ver_str + " not supported, version must be >=" + blkar_min_ver + " && < " + blkar_max_ver_exc)
        exit(1)

class Encoder:
    def __init__(self, file_path : str):
        self.proc = Popen(["blkar", "encode",
                           "--sbx-version", "19",
                           "--rs-data", str(rs_data),
                           "--rs-parity", str(rs_parity),
                           "--burst", str(burst),
                           "--json",
                           "-",
                           file_path],
                          stdin=PIPE,
                          stdout=PIPE)

    def encode(self, input : bytes):
        self.proc.stdin.write(input)

    def close(self):
        self.proc.stdin.close()

class Decoder:
    def __init__(self, file_path : str):
        self.proc = Popen(["blkar", "decode",
                           "--json",
                           file_path,
                           "-"],
                          stdin=PIPE,
                          stdout=PIPE)

    def decode(self):
        return self.proc.stdout.read(data_chunk)

    def close(self):
        self.proc.terminate()

class Message:
    def to_bytes(self):
        return bytes(json.dumps(self.to_dict()), "utf-8")

    def write_to_file(self, file):
        file.write(self.to_bytes())
        file.write(b"\n")

    def send(self, conn):
        conn.send(self.to_bytes())
        conn.send(b"\n")

class ClientRequest(Message):
    OPS = ["upload", "download", "list"]

    def __init__(self):
        self.op = None
        self.file_name = None

    def to_dict(self):
        {
            "op" : self.op,
            "file_name" : self.file_name
        }

    def pack(self, op, file_name):
        if op not in ClientRequest.OPS:
            raise ValueError("Invalid op")
        self.op = op
        self.file_name = file_name

    def read_from_file(self, file):
        # msg = b""
        # while not msg:
        #     msg = json.loads(file.readline())

        msg = json.loads(file.readline())

        print("test")
        print(msg)

        self.op = msg["op"]
        if self.op not in ClientRequest.OPS:
            raise ValueError("Invalid op")
        self.file_name = msg["file_name"]

class ServerReply(Message):
    def __init__(self):
        self.okay = True
        self.file_name = None

    def to_dict(self):
        {
            "okay" : self.okay,
            "file_name" : self.file_name
        }

    def pack(self, okay, file_name):
        self.okay = okay
        self.file_name = file_name

    def read_from_file(self, file):
        msg = json.loads(file.readline())

        if msg.okay != True and msg.okay != False:
            raise ValueError("Invalid okay")
        self.okay = msg["okay"]
        self.file_name = msg["file_name"]

class SingleClientServer:
    def __init__(self, stop_ev, conn, addr):
        self.conn = conn
        self.file = conn.makefile(mode='rwb')
        self.addr = addr
        self.stop_ev = stop_ev
        self.encoder = None
        self.decoder = None

        thread = threading.Thread(target=self.run, args=())
        thread.start()

    def core(self):
        print("Serving ", self.addr)

        try:
            # read request
            client_req = ClientRequest()
            client_req.read_from_file(self.file)

            if client_req.op == "upload":
                print("Client requested to upload")
                file_name = client_req.file_name + "_" + get_time_str() + "_" + gen_random_str(12) + ".ecsbx"
                while os.path.isfile(file_name):
                    file
                self.encoder = Encoder(client_req.file_name + get_time_str() + ".ecsbx")

                # send reply
                rep = ServerReply()
                rep.pack(True, file_name)
                rep.write_to_file(self.file)

                while True:
                    data = self.file.read(1024)
                    if not data:
                        break
                    self.encoder.encode(data)
            else:
                print("Client requested to download")
                decoder = Decoder(client_req.file_name)
        except json.decoder.JSONDecodeError:
            print("Invalid config sent from client")
        except KeyError:
            print("Invalid config sent from client")
        except KeyboardInterrupt:
            print("Interrupted")
        except ValueError as e:
            print("ValueError : " + str(e))
        finally:
            self.clean_up()

    def clean_up(self):
        self.file.close()
        self.conn.close()
        if self.encoder is not None:
            self.encoder.close()
        if self.decoder is not None:
            self.decoder.close()

    def run(self):
        self.core()
        self.clean_up()

def serve(args):
    stop_ev = threading.Event()
    addr = "127.0.0.1"
    port = args.p
    check_for_blkar_installation()
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind((addr, port))
            s.listen()
            while True:
                conn, addr = s.accept()
                SingleClientServer(stop_ev, conn, addr)
    except KeyboardInterrupt:
        print("Interrupted")

def upload(args):
    file_name = args.file

    # send request
    client_req = ClientRequest()
    client_req.pack("upload", file_name)

    with socket.create_connection((str(args.addr), str(args.p))) as s:
        client_req.send(s)
        with open(file_name, "rb") as f:
            while True:
                data = f.read(1024)
                if not data:
                    break
                s.send(data)

        # with s.makefile(mode="rwb") as f:
        #     server_rep = ServerReply()
        #     server_rep.read_from_file(f)
        #     print(server_rep)

def download(args):
    pass

def print_please_specify_subcommand(args):
    print("Invoke with -h or --help for help message")

def main():
    check_for_blkar_installation()
    parser = argparse.ArgumentParser()
    parser.set_defaults(func=print_please_specify_subcommand)
    subparsers = parser.add_subparsers(help="subcommand help")

    parser_serve = subparsers.add_parser("serve", help="Launch in server mode")
    parser_serve.add_argument("-p", metavar="PORT", default=default_port, type=int, help="Localhost port to listen on, defaults to " + str(default_port))
    parser_serve.add_argument("dir", help="Directory for file storage")
    parser_serve.set_defaults(func=serve)

    parser_upload = subparsers.add_parser("upload", help="Upload file to server")
    parser_upload.add_argument("addr", type=ipaddress.ip_address, help="Address to connect to")
    parser_upload.add_argument("-p", metavar="PORT", default=default_port, type=int, help="Port to connect to, defaults to " + str(default_port))
    parser_upload.add_argument("file", help="File to upload")
    parser_upload.set_defaults(func=upload)

    parser_download = subparsers.add_parser("download", help="Download file from server")
    parser_download.add_argument("addr", type=ipaddress.ip_address, help="Address to connect to")
    parser_download.add_argument("-p", metavar="PORT", default=default_port, type=int, help="Port to connect to, defaults to " + str(default_port))
    parser_download.set_defaults(func=download)

    args = parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    main()
